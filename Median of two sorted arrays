#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Helper function to find the median of two sorted arrays
double findMedianSortedArrays(int* nums1, int m, int* nums2, int n) {
    if (m > n) {
        // Ensure nums1 is the smaller array
        return findMedianSortedArrays(nums2, n, nums1, m);
    }

    int left = 0, right = m;
    while (left <= right) {
        int partition1 = (left + right) / 2;
        int partition2 = (m + n + 1) / 2 - partition1;

        // If partition1 is 0, that means there's nothing on the left side of nums1
        // If partition1 is m, that means there's nothing on the right side of nums1
        int maxLeft1 = (partition1 == 0) ? -INFINITY : nums1[partition1 - 1];
        int minRight1 = (partition1 == m) ? INFINITY : nums1[partition1];

        int maxLeft2 = (partition2 == 0) ? -INFINITY : nums2[partition2 - 1];
        int minRight2 = (partition2 == n) ? INFINITY : nums2[partition2];

        if (maxLeft1 <= minRight2 && maxLeft2 <= minRight1) {
            // If the total length is odd, the median is the max of left side
            if ((m + n) % 2 == 1) {
                return fmax(maxLeft1, maxLeft2);
            } else {
                // If the total length is even, the median is the average of the two middle values
                return (fmax(maxLeft1, maxLeft2) + fmin(minRight1, minRight2)) / 2.0;
            }
        } else if (maxLeft1 > minRight2) {
            right = partition1 - 1;
        } else {
            left = partition1 + 1;
        }
    }

    return -1; // This should never be reached if the inputs are valid.
}
